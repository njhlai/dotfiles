#!/bin/bash

. $(dirname $0)/panelConfig

# Get screen height and width and do bar width calculation
SCREENHEIGHT=$(xrandr -q | grep Screen | awk '{print $10}' | sed 's/,//')
SCREENWIDTH=$(xrandr -q | grep -oP "[a-zA-Z0-9\-] connected primary \K[0-9]{4}")
BARWIDTH=$((${SCREENWIDTH} - $((${EDGEWIDTH} * 2))))

# Get stable constants
OS=$(grep -oP 'NAME="\K[A-Za-z]+' -m 1 /etc/os-release | tr a-z A-Z)
HOST="$(uname -n)"

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[[ -e "$PANEL_FIFO" ]] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"
	
{

	## start left section
	host() {
		local ICON=$(echo -e "$(printf '%b'${!OS})")
		local SEP=$(echo -e "$(printf '%b'${LEFT_SOFT_DIVIDER})")
		echo "%{B${SEC_0}}%{F${PURPLE}}  ${ICON}%{F-}  %{F${WHITE}}${SEP}%{F-}%{B-}"
	}
	## End left section


	## start centre section
	getDay() {
		local ICON=$(echo -e "$(printf '%b'${CLOCK})")

		local cmdDay=$(date '+%a')
		local cmdDate=$(date '+%d %b')
		local cmdHour=$(date +%H:%M)

		local CMD=$(echo -e "%{B${SALMON}}%{F${BLACK}} ${ICON}  ${cmdDay}  ${cmdDate}  ${cmdHour} %{F-}%{B-}")
		echo "$CMD"
	}
	## end centre section


	## start right section
	pihole() {
		if [[ ${pihole_s} && ${pihole_s} == "enabled" ]] ; then
			local ICON=$(echo -e "$(printf '%b'${PI})")

			local CMD=$(echo -e "%{F${RED}}%{B${TRANSPARENT}}$(printf '%b'${RIGHT_HARD_DIVIDER})%{B-}%{F-}%{B${RED}}%{F${BLACK}}${ICON} ${ads_b}% %{F-}%{B-}")
			echo "$CMD"
		fi
	}

	battemp() {
		local CMD=

		# get battery info if applicable
		if [[ -f /sys/class/power_supply/BAT0/charge_full ]] ; then
			local bat_full=$(cat /sys/class/power_supply/BAT0/charge_full)
			local bat_now=$(cat /sys/class/power_supply/BAT0/charge_now)
			local bat_stat=$(cat /sys/class/power_supply/BAT0/status)
			local bat_perc=$(( (100 * ${bat_now} + ${bat_full} - 1) / ${bat_full} ))

			if [[ ${bat_stat} == "Charging" ]]; then
				local BATICON=$(echo -e "$(printf '%b'${BAT_CHARGE})")
				local BATCOLOUR=${YELLOW}
			elif (( ${bat_perc} < 25 )) ; then
				local BATICON=$(echo -e "$(printf '%b'${BAT_QUART})")
				local BATCOLOUR=${RED}
			elif (( ${bat_perc} < 50 )) ; then
				local BATICON=$(echo -e "$(printf '%b'${BAT_HALF})")
				local BATCOLOUR=${YELLOW}
			elif (( ${bat_perc} < 75 )); then
				local BATICON=$(echo -e "$(printf '%b'${BAT_3QUART})")
				local BATCOLOUR=${GREEN}
			else
				local BATICON=$(echo -e "$(printf '%b'${BAT_FULL})")
				local BATCOLOUR=${GREEN}
			fi

			local SEP=$(echo -e "$(printf '%b'${RIGHT_HARD_DIVIDER})")
			local PREVBCOLOUR=${TRANSPARENT}
			if [[ ${pihole_s} && ${pihole_s} == "enabled" ]] ; then
				PREVBCOLOUR=${RED}
				SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
			fi

			CMD=$(echo -e "%{F${BATCOLOUR}}%{B${PREVBCOLOUR}}${SEP}%{B-}%{F-}%{B${BATCOLOUR}}%{F${BLACK}}${BATICON} ${bat_perc}% %{F-}%{B-}")
		fi

		local TEMPICON=$(echo -e "$(printf '%b'${TEMP})")
		local UNIT=$(echo -e "$(printf '%b'${CELCIUS})")

		local SEP=$(echo -e "$(printf '%b'${RIGHT_HARD_DIVIDER})")
		local PREVBCOLOUR=${TRANSPARENT}
		if [[ -f /sys/class/power_supply/BAT0/charge_full ]] ; then
			PREVBCOLOUR=${BATCOLOUR}
			SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
		elif [[ ${pihole_s} && ${pihole_s} == "enabled" ]] ; then
			PREVBCOLOUR=${RED}
			SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
		fi

		local temp=$(sensors | grep -oP '(T(die|ctl)|Package id 0).*?\+\K[0-9.]+' -m 1)

		CMD=$(echo -e "${CMD}%{F${WHITE}}%{B${PREVBCOLOUR}}${SEP}%{B-}%{F-}%{B${WHITE}}%{F${BLACK}}${TEMPICON} ${temp}${UNIT} %{F-}%{B-}")
		echo "$CMD"
	}

	ram() {
		local ICON=$(echo -e "$(printf '%b'${RAM})")

		read -r -a ram_raw <<< "$(awk '/MemTotal:/{total=$2} /MemFree:/{free=$2} /MemAvailable:/{avail=$2} /Buffers:/{buffers=$2} /^Cached:/{cached=$2} /Shmem:/{shmem=$2} /SReclaimable:/{srec=$2}\
		END {printf "%.2f %.2f", (total-free-buffers-cached-srec)/(2^20), \
		(free+buffers+cached-avail)/(2^20)}' /proc/meminfo)"
		ram_used="${ram_raw[0]}"
		# ram_immutable="${ram_raw[1]}"

		CMD=$(echo -e "${CMD}%{F${CYAN}}%{B${WHITE}}$(printf '%b'${RIGHT_SOFT_DIVIDER})%{B-}%{F-}%{B${CYAN}}%{F${BLACK}}${ICON} ${ram_used}GB %{F-}%{B-}")
		echo "$CMD"
	}

	cpu() {
		local ICON=$(echo -e "$(printf '%b'${CPU})")

		local sys_cores=$(grep -c "^processor" /proc/cpuinfo)
		local cpu_raw=$(ps -eo pcpu,rss --no-headers | grep -E -v "    0")
		local cpu_perc=$(awk '{sum+=$1} END {printf "%02d\n", sum/'"$sys_cores"'}' <<< "$cpu_raw")

		local CMD=$(echo -e "%{F${PURPLE}}%{B${CYAN}}$(printf '%b'${RIGHT_SOFT_DIVIDER})%{B-}%{F-}%{B${PURPLE}}%{F${BLACK}}${ICON} ${cpu_perc}%   %{F-}%{B-}")
		echo "$CMD"
	}
	## End right section


	## seperators
	SEP_L(){
		local CMD=$(echo -e "%{B${TRANSPARENT}}%{F${SALMON}}$(printf '%b'${LEFT_HARD_DIVIDER})%{F-}%{B-}")
		echo "$CMD"
	}

	SEP_R() {
		local CMD=$(echo -e "%{B${TRANSPARENT}}%{F${SALMON}}$(printf '%b'${RIGHT_HARD_DIVIDER})%{F-}%{B-}")
		echo "$CMD"
	}


	## Unused components
	# music() {
	# 	local ICON=$(echo -e "$(printf '%b'${MUSIC})")
	# 	local CMD=""

	# 	local players=$(playerctl -p mpv -l 2>/dev/null)
	# 	for player in $players; do
	# 		if [[ -z $CMD ]] ; then
	# 			local stat="$(playerctl -p ${player} status)"
	# 			if [[ ${stat} && ${stat} == "Playing" ]] ; then
	# 				local artist=$(playerctl -p ${player} metadata artist 2>/dev/null)
	# 				local title=$(playerctl -p ${player} metadata title)
	# 				local CMD=$(echo -e "%{B${YELLOW}}%{F${BLACK}} ${ICON} ${artist} - ${title} %{F-}%{B-}%{F${YELLOW}}%{B${TRANSPARENT}}$(printf '%b'${LEFT_HARD_DIVIDER})%{B-}%{F-}")
	# 			elif [[ ${stat} && ${stat} == "Paused" ]] ; then
	# 				local CMD=$(echo -e "%{B${YELLOW}}%{F${BLACK}} ${ICON} ${player}: ${stat} %{F-}%{B-}%{F${YELLOW}}%{B${TRANSPARENT}}$(printf '%b'${LEFT_HARD_DIVIDER})%{B-}%{F-}")
	# 			fi
	# 		fi
	# 	done
	# 	echo "$CMD"
	# }
	
	# disk() {
	# 	local icon=$(pIcon ${BG} ${CDISK})
	# 	local SEP=$(pIcon ${BG} ${RIGHT_SOFT_DIVIDER})
	# 	read -r -a disk_raw <<< "$(df -B1 / 2> /dev/null | awk 'END{ print $3,$2,$5 }')"
	# 	disk_used="${disk_raw[0]}"
	# 	disk_total="${disk_raw[1]}"
	# 	disk_perc="${disk_raw[2]}"
	# 	local cmd="$(df -h /home | tail -1 | awk '{print int($4/$2*100)"%"}')"
	# 	local cmdEnd=$(pText ${FG} "${cmd}" )
	# 	local extinf=$(powerTextR ${SEC_4} ${FG} "${icon} ${disk_perc} $SEP Used: $(hrBytes "$disk_used") of $(hrBytes "$disk_total")" ${SEC_1} ${RIGHT_HARD_DIVIDER})
	# 	echo "${extinf}"
	# }

	# mail() {
	# 	local gmaildir=/home/user/.mails/Gmail/\[Gmail\].All\ Mail/new
	# 	local cmd=$(pAction ${BLUE} ${BG} "i3 'exec termite -e mutt'" ${CMAIL})
	# 	local count=0
	# 	if [[ ! -n $(ls "${gmaildir}") ]] ; then
	# 			count=0
	# 	else
	# 			count=$(ls -1 "${gmaildir}" | wc -l)
	# 	fi
	# 	echo "${cmd} ${count}"
	# }

	declare -i counter=0
	while :; do
		# if pihole is not originally on, then keep querrying
		if [[ -z ${pihole_s} || ${pihole_s} != "enabled" ]] ; then
			pihole_s=$(ssh $PIHOLE pihole status 2>/dev/null | awk '/Pi-hole/{print $5}')
			counter=0
		fi

		# get pihole stats every 15 minutes
		if [[ "${pihole_s}" && ${pihole_s} == "enabled" && $counter == 0 ]] ; then
			ads_b=$(ssh ${PIHOLE} pihole -c -j | jq | awk '/"ads_percentage_today":/{printf "%0.1f\n",$2}')
		fi
		counter=$(($(($counter+1)) % 900))

		echo "H$(host)"
		echo "T$(SEP_R)$(getDay)$(SEP_L)"
		echo "S$(pihole)$(battemp)$(ram)$(cpu)"
		sleep 1
	done
} > "$PANEL_FIFO" &

bspc subscribe report > "$PANEL_FIFO" &

$(dirname $0)/panelFIFO < "$PANEL_FIFO" | lemonbar \
		-a 32 \
		-n "$PANEL_WM_NAME" \
		-g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH}+${UPPERWIDTH} \
		-u $UNDERLINE_WIDTH \
		-f "${FONT}" \
		-f "${ICONS}" \
		-f "${JPFONT}" \
		-F "${WHITE}" \
		-B "${TRANSPARENT}" | sh | while read line; do eval "$line"; done &


wid=$(xdo id -a "$PANEL_WM_NAME" | sort | head -n 1)
tries_left=20
while [[ -z ${wid} && ${tries_left} -gt 0 ]] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME" | sort | head -n 1)
	tries_left=$((tries_left - 1))
done
[[ -n ${wid} ]] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "${wid}"


wait
