#!/bin/bash

. $(dirname $0)/panelConfig

# Get screen height and width and do bar width calculation
SCREENHEIGHT=$(xrandr -q | grep Screen | awk '{print $10}' | sed 's/,//')
SCREENWIDTH=$(xrandr -q | grep -oP "[a-zA-Z0-9\-] connected primary \K[0-9]{4}")
BARWIDTH=$((${SCREENWIDTH} - $((${EDGEWIDTH} * 2))))

# Get stable constants
OS=$(grep -oP 'NAME="\K[A-Za-z]+' -m 1 /etc/os-release | tr a-z A-Z)

trap 'trap - TERM ; kill 0' INT TERM QUIT EXIT

[[ -e "$PANEL_FIFO" ]] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"
	
{
	## start left section
	host() {
		local ICON=$(echo -e "$(printf '%b'${!OS})")
		local SEP=$(echo -e "$(printf '%b'${LEFT_SOFT_DIVIDER})")
		echo "%{B${SEC_0}}%{F${PURPLE}} ${ICON}%{F-} %{F${WHITE}}${SEP} %{F-}%{B-}"
	}
	## End left section


	## start centre section
	get_day() {
		local ICON=$(echo -e "$(printf '%b'${CLOCK})")
		local SEP=$(echo -e "$(printf '%b'${INTERNAL_DIVIDER})")

		local cmd_day=$(date '+%a')
		local cmd_date=$(date '+%d %b')
		local cmd_hour=$(date +%H:%M)

		local CMD=$(echo -e "%{B${SALMON}}%{F${BLACK}} ${ICON} %{A:calnotify:}${cmd_day} ${SEP} ${cmd_date} ${SEP} ${cmd_hour}%{A} %{F-}%{B-}")
		echo "$CMD"
	}
	## end centre section


	## start right section
	pihole() {
		if [[ ${pihole_status} && ${pihole_status} == "enabled" ]] ; then
			local ICON=$(echo -e "$(printf '%b'${PI})")

			local CMD=$(echo -e "%{F${RED}}%{B${TRANSPARENT}}%{T2}$(printf '%b'${RIGHT_HARD_DIVIDER})%{T-}%{B-}%{F-}%{B${RED}}%{F${BLACK}} ${ICON} ${ads_blocked}% %{F-}%{B-}")
			echo "$CMD"
		fi
	}

	battemp() {
		local CMD=

		# get battery info if applicable
		if [[ -f /sys/class/power_supply/BAT0/charge_full ]] ; then
			read -r -a bat <<< $(upower -i $(upower -e | grep "BAT") | awk '/percentage:/{perc=$2} /state:/{state=$2}END {printf "%s %i",state,perc}')
			local bat_perc=${bat[1]}

			if [[ ${bat[0]} == "charging" ]] ; then
				local BATICON=$(echo -e "$(printf '%b'${BAT_CHARGE})")
				local BATCOLOUR=${YELLOW}
			else
				local BAT_LEVEL=$((${bat_perc} / 25))
				local BATICON=$(echo -e "$(printf '%b'${ICON_ARRAY[${BAT_LEVEL}]})")
				local BATCOLOUR=${COLOUR_ARRAY[${BAT_LEVEL}]}
			fi

			local SEP=$(echo -e "$(printf '%b'${RIGHT_HARD_DIVIDER})")
			local SPACE=" "
			local PREVBCOLOUR=${TRANSPARENT}
			if [[ ${pihole_status} && ${pihole_status} == "enabled" ]] ; then
				PREVBCOLOUR=${RED}
				SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
				SPACE=""
			fi

			CMD=$(echo -e "%{F${BATCOLOUR}}%{B${PREVBCOLOUR}}%{T2}${SEP}%{T-}%{B-}%{F-}%{B${BATCOLOUR}}%{F${BLACK}}${SPACE}${BATICON} ${bat_perc}% %{F-}%{B-}")
		fi

		local TEMPICON=$(echo -e "$(printf '%b'${TEMP})")
		local UNIT=$(echo -e "$(printf '%b'${CELCIUS})")

		local SEP=$(echo -e "$(printf '%b'${RIGHT_HARD_DIVIDER})")
		local SPACE=" "
		local PREVBCOLOUR=${TRANSPARENT}
		if [[ -f /sys/class/power_supply/BAT0/charge_full ]] ; then
			PREVBCOLOUR=${BATCOLOUR}
			SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
			SPACE=""
		elif [[ ${pihole_status} && ${pihole_status} == "enabled" ]] ; then
			PREVBCOLOUR=${RED}
			SEP=$(echo -e "$(printf '%b'${RIGHT_SOFT_DIVIDER})")
			SPACE=""
		fi

		local temp=$(sensors | grep -oP '(T(die|ctl)|Package id 0).*?\+\K[0-9.]+' -m 1)

		CMD=$(echo -e "${CMD}%{F${WHITE}}%{B${PREVBCOLOUR}}%{T2}${SEP}%{T-}%{B-}%{F-}%{B${WHITE}}%{F${BLACK}}${SPACE}${TEMPICON} ${temp}${UNIT} %{F-}%{B-}")
		echo "$CMD"
	}

	ram() {
		local ICON=$(echo -e "$(printf '%b'${RAM})")

		read -r -a ram_raw <<< "$(awk '/MemTotal:/{total=$2} /MemFree:/{free=$2} /MemAvailable:/{avail=$2} /Buffers:/{buffers=$2} /^Cached:/{cached=$2} /Shmem:/{shmem=$2} /SReclaimable:/{srec=$2}\
		END {printf "%.2f %.2f", (total-free-buffers-cached-srec)/(2^20), \
		(free+buffers+cached-avail)/(2^20)}' /proc/meminfo)"
		ram_used="${ram_raw[0]}"
		# ram_immutable="${ram_raw[1]}"

		CMD=$(echo -e "${CMD}%{F${CYAN}}%{B${WHITE}}%{T2}$(printf '%b'${RIGHT_SOFT_DIVIDER})%{T-}%{B-}%{F-}%{B${CYAN}}%{F${BLACK}}${ICON} ${ram_used}GB %{F-}%{B-}")
		echo "$CMD"
	}

	cpu() {
		local ICON=$(echo -e "$(printf '%b'${CPU})")

		local sys_cores=$(grep -c "^processor" /proc/cpuinfo)
		local cpu_raw=$(ps -eo pcpu,rss --no-headers | grep -E -v "    0")
		local cpu_perc=$(awk '{sum+=$1} END {printf "%02d\n", sum/'"$sys_cores"'}' <<< "$cpu_raw")

		local CMD=$(echo -e "%{F${PURPLE}}%{B${CYAN}}%{T2}$(printf '%b'${RIGHT_SOFT_DIVIDER})%{T-}%{B-}%{F-}%{B${PURPLE}}%{F${BLACK}}${ICON} ${cpu_perc}% %{F-}%{B-}")
		echo "$CMD"
	}
	## End right section


	## seperators
	SEP_L(){
		local CMD=$(echo -e "%{B${TRANSPARENT}}%{F${SALMON}}%{T2}$(printf '%b'${LEFT_HARD_DIVIDER})%{T-}%{F-}%{B-}")
		echo "$CMD"
	}

	SEP_R() {
		local CMD=$(echo -e "%{B${TRANSPARENT}}%{F${SALMON}}%{T2}$(printf '%b'${RIGHT_HARD_DIVIDER})%{T-}%{F-}%{B-}")
		echo "$CMD"
	}


	declare -i counter=0
	while : ; do
		if [[ $counter == 0 ]] ; then
			pihole_response=( $(curl -s "http://${PIHOLE}/admin/api.php?summary&auth=${PIHOLE_AUTH}" | jq -r .status,.ads_percentage_today 2> /dev/null) )
			pihole_status=${pihole_response[0]}
			ads_blocked=${pihole_response[1]}
		fi

		if [[ -z ${pihole_status} || ${pihole_status} != "enabled" ]] ; then
			# if pihole is not originally on, then keep querrying
			counter=0
		else
			# get pihole stats every 15 minutes
			counter=$(($(($counter+1)) % 900))
		fi

		echo "H$(host)"
		echo "T$(SEP_R)$(get_day)$(SEP_L)"
		echo "S$(pihole)$(battemp)$(ram)$(cpu)"
		sleep 1
	done
} > "$PANEL_FIFO" &

bspc subscribe report > "$PANEL_FIFO" &

$(dirname $0)/panelFIFO < "$PANEL_FIFO" | lemonbar \
		-a 32 \
		-n "$PANEL_WM_NAME" \
		-g ${BARWIDTH}x${BARHEIGHT}+${EDGEWIDTH}+${UPPERWIDTH} \
		-u $UNDERLINE_WIDTH \
		-f "${FONT}" \
		-f "${ICONS}" \
		-f "${CNFONT}" \
		-F "${WHITE}" \
		-B "${TRANSPARENT}" | sh | while read line ; do eval "$line" ; done &


wid=$(xdo id -a "$PANEL_WM_NAME" | sort | head -n 1)
tries_left=20
while [[ -z ${wid} && ${tries_left} -gt 0 ]] ; do
	sleep 0.05
	wid=$(xdo id -a "$PANEL_WM_NAME" | sort | head -n 1)
	tries_left=$((tries_left - 1))
done
[[ -n ${wid} ]] && xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "${wid}"


wait
